# -*- coding: utf-8 -*-
"""titanicdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eyELdDA5raW01JJrw4F1Y2gIJkW4VYvi
"""

import os
from google.colab import drive
drive.mount('/content/drive/')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import math
# %matplotlib inline

mydata=pd.read_csv('/content/drive/My Drive/csv/titanic.csv')
print(mydata.shape)
mydata.head()

print("Number of Passenger travelled in Titanic: "+str(len(mydata.index)))

sns.countplot(data=mydata)

sns.countplot(x='Survived',data=mydata)

sns.countplot(x='Survived',hue='Pclass',data=mydata)
plt.rcParams['figure.figsize']=(10.0,5.0)

sns.countplot(x='Survived',hue='Sex',data=mydata)

plt.rcParams['figure.figsize'] = (10.0,5.0)
mydata['Age'].plot.hist()

mydata['Fare'].plot.hist()

mydata.info()

mydata.isnull()

plt.rcParams['figure.figsize'] = (10.0,5.0)
sns.heatmap(mydata.isnull(),yticklabels=False)

sns.boxplot(x='Pclass',y='Age',data=mydata)

mydata.head(5)

mydata.drop('Cabin',axis=1,inplace=True)

mydata.head(5)

mydata.dropna(inplace=True)

mydata.head(5)

sns.heatmap(mydata.isnull(),yticklabels=False)

mydata.isnull().sum()

pd.get_dummies(mydata['Sex'])

pd.get_dummies(mydata['Sex'],drop_first='True')

gender = pd.get_dummies(mydata['Sex'],drop_first='True')

gender.head(5)

mydata.head(5)

embarked = pd.get_dummies(mydata['Embarked'])
embarked=pd.get_dummies(mydata['Embarked'],drop_first=True)

embarked.head(5)

pclass=pd.get_dummies(mydata['Pclass'])
pclass=pd.get_dummies(mydata['Pclass'],drop_first=True)

pclass.head(5)

mydata=pd.concat([mydata,gender,pclass,embarked],axis=1)

mydata.head(5)

mydata.drop(['PassengerId','Pclass','Name','Sex','Embarked','Ticket'],axis=1,inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix,accuracy_score

x = mydata.drop('Survived',axis=1)
y = mydata['Survived']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=48)
logmodel = LogisticRegression()
logmodel.fit(x_train,y_train)

predictions = logmodel.predict(x_test)
print('Classification Report')
print(classification_report(y_test,predictions))
print('Confusion Matrix')
print(confusion_matrix(y_test,predictions))
print('\n Accuracy Report')
print(accuracy_score(y_test,predictions))